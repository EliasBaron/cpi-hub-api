// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositories.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=./repositories.go -destination=./mock/repositories_mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	domain "cpi-hub-api/internal/core/domain"
	criteria "cpi-hub-api/internal/core/domain/criteria"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
	isgomock struct{}
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockUserRepository) Count(ctx context.Context, arg1 *criteria.Criteria) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockUserRepositoryMockRecorder) Count(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUserRepository)(nil).Count), ctx, arg1)
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, user)
}

// Find mocks base method.
func (m *MockUserRepository) Find(ctx context.Context, arg1 *criteria.Criteria) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserRepositoryMockRecorder) Find(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserRepository)(nil).Find), ctx, arg1)
}

// Search mocks base method.
func (m *MockUserRepository) Search(ctx context.Context, arg1 *criteria.Criteria) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, arg1)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockUserRepositoryMockRecorder) Search(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockUserRepository)(nil).Search), ctx, arg1)
}

// Update mocks base method.
func (m *MockUserRepository) Update(ctx context.Context, user *domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), ctx, user)
}

// MockSpaceRepository is a mock of SpaceRepository interface.
type MockSpaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceRepositoryMockRecorder
	isgomock struct{}
}

// MockSpaceRepositoryMockRecorder is the mock recorder for MockSpaceRepository.
type MockSpaceRepositoryMockRecorder struct {
	mock *MockSpaceRepository
}

// NewMockSpaceRepository creates a new mock instance.
func NewMockSpaceRepository(ctrl *gomock.Controller) *MockSpaceRepository {
	mock := &MockSpaceRepository{ctrl: ctrl}
	mock.recorder = &MockSpaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceRepository) EXPECT() *MockSpaceRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockSpaceRepository) Count(ctx context.Context, arg1 *criteria.Criteria) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockSpaceRepositoryMockRecorder) Count(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockSpaceRepository)(nil).Count), ctx, arg1)
}

// Create mocks base method.
func (m *MockSpaceRepository) Create(ctx context.Context, space *domain.Space) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, space)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSpaceRepositoryMockRecorder) Create(ctx, space any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSpaceRepository)(nil).Create), ctx, space)
}

// Find mocks base method.
func (m *MockSpaceRepository) Find(ctx context.Context, arg1 *criteria.Criteria) (*domain.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, arg1)
	ret0, _ := ret[0].(*domain.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockSpaceRepositoryMockRecorder) Find(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockSpaceRepository)(nil).Find), ctx, arg1)
}

// FindAll mocks base method.
func (m *MockSpaceRepository) FindAll(ctx context.Context, arg1 *criteria.Criteria) ([]*domain.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, arg1)
	ret0, _ := ret[0].([]*domain.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockSpaceRepositoryMockRecorder) FindAll(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockSpaceRepository)(nil).FindAll), ctx, arg1)
}

// FindByIDs mocks base method.
func (m *MockSpaceRepository) FindByIDs(ctx context.Context, ids []int) ([]*domain.Space, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, ids)
	ret0, _ := ret[0].([]*domain.Space)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockSpaceRepositoryMockRecorder) FindByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockSpaceRepository)(nil).FindByIDs), ctx, ids)
}

// Update mocks base method.
func (m *MockSpaceRepository) Update(ctx context.Context, space *domain.Space) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, space)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSpaceRepositoryMockRecorder) Update(ctx, space any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSpaceRepository)(nil).Update), ctx, space)
}

// MockUserSpaceRepository is a mock of UserSpaceRepository interface.
type MockUserSpaceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserSpaceRepositoryMockRecorder
	isgomock struct{}
}

// MockUserSpaceRepositoryMockRecorder is the mock recorder for MockUserSpaceRepository.
type MockUserSpaceRepositoryMockRecorder struct {
	mock *MockUserSpaceRepository
}

// NewMockUserSpaceRepository creates a new mock instance.
func NewMockUserSpaceRepository(ctrl *gomock.Controller) *MockUserSpaceRepository {
	mock := &MockUserSpaceRepository{ctrl: ctrl}
	mock.recorder = &MockUserSpaceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSpaceRepository) EXPECT() *MockUserSpaceRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockUserSpaceRepository) Count(ctx context.Context, arg1 *criteria.Criteria) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockUserSpaceRepositoryMockRecorder) Count(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockUserSpaceRepository)(nil).Count), ctx, arg1)
}

// Exists mocks base method.
func (m *MockUserSpaceRepository) Exists(ctx context.Context, userId, spaceId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, userId, spaceId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockUserSpaceRepositoryMockRecorder) Exists(ctx, userId, spaceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserSpaceRepository)(nil).Exists), ctx, userId, spaceId)
}

// FindSpacesIDsByUserID mocks base method.
func (m *MockUserSpaceRepository) FindSpacesIDsByUserID(ctx context.Context, userID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSpacesIDsByUserID", ctx, userID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSpacesIDsByUserID indicates an expected call of FindSpacesIDsByUserID.
func (mr *MockUserSpaceRepositoryMockRecorder) FindSpacesIDsByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSpacesIDsByUserID", reflect.TypeOf((*MockUserSpaceRepository)(nil).FindSpacesIDsByUserID), ctx, userID)
}

// FindUserIDsBySpaceID mocks base method.
func (m *MockUserSpaceRepository) FindUserIDsBySpaceID(ctx context.Context, spaceID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserIDsBySpaceID", ctx, spaceID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserIDsBySpaceID indicates an expected call of FindUserIDsBySpaceID.
func (mr *MockUserSpaceRepositoryMockRecorder) FindUserIDsBySpaceID(ctx, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserIDsBySpaceID", reflect.TypeOf((*MockUserSpaceRepository)(nil).FindUserIDsBySpaceID), ctx, spaceID)
}

// Update mocks base method.
func (m *MockUserSpaceRepository) Update(ctx context.Context, userId int, spaceIDs []int, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, userId, spaceIDs, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserSpaceRepositoryMockRecorder) Update(ctx, userId, spaceIDs, action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserSpaceRepository)(nil).Update), ctx, userId, spaceIDs, action)
}

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
	isgomock struct{}
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockPostRepository) Count(ctx context.Context, arg1 *criteria.Criteria) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockPostRepositoryMockRecorder) Count(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockPostRepository)(nil).Count), ctx, arg1)
}

// Create mocks base method.
func (m *MockPostRepository) Create(ctx context.Context, post *domain.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPostRepositoryMockRecorder) Create(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostRepository)(nil).Create), ctx, post)
}

// Find mocks base method.
func (m *MockPostRepository) Find(ctx context.Context, arg1 *criteria.Criteria) (*domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, arg1)
	ret0, _ := ret[0].(*domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPostRepositoryMockRecorder) Find(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPostRepository)(nil).Find), ctx, arg1)
}

// Search mocks base method.
func (m *MockPostRepository) Search(ctx context.Context, arg1 *criteria.Criteria) ([]*domain.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, arg1)
	ret0, _ := ret[0].([]*domain.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPostRepositoryMockRecorder) Search(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPostRepository)(nil).Search), ctx, arg1)
}

// Update mocks base method.
func (m *MockPostRepository) Update(ctx context.Context, post *domain.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPostRepositoryMockRecorder) Update(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostRepository)(nil).Update), ctx, post)
}

// MockCommentRepository is a mock of CommentRepository interface.
type MockCommentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommentRepositoryMockRecorder
	isgomock struct{}
}

// MockCommentRepositoryMockRecorder is the mock recorder for MockCommentRepository.
type MockCommentRepositoryMockRecorder struct {
	mock *MockCommentRepository
}

// NewMockCommentRepository creates a new mock instance.
func NewMockCommentRepository(ctrl *gomock.Controller) *MockCommentRepository {
	mock := &MockCommentRepository{ctrl: ctrl}
	mock.recorder = &MockCommentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentRepository) EXPECT() *MockCommentRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockCommentRepository) Count(ctx context.Context, arg1 *criteria.Criteria) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockCommentRepositoryMockRecorder) Count(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockCommentRepository)(nil).Count), ctx, arg1)
}

// Create mocks base method.
func (m *MockCommentRepository) Create(ctx context.Context, comment *domain.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockCommentRepositoryMockRecorder) Create(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentRepository)(nil).Create), ctx, comment)
}

// Find mocks base method.
func (m *MockCommentRepository) Find(ctx context.Context, arg1 *criteria.Criteria) (*domain.CommentWithInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, arg1)
	ret0, _ := ret[0].(*domain.CommentWithInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCommentRepositoryMockRecorder) Find(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCommentRepository)(nil).Find), ctx, arg1)
}

// FindAll mocks base method.
func (m *MockCommentRepository) FindAll(ctx context.Context, arg1 *criteria.Criteria) ([]*domain.CommentWithInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, arg1)
	ret0, _ := ret[0].([]*domain.CommentWithInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockCommentRepositoryMockRecorder) FindAll(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockCommentRepository)(nil).FindAll), ctx, arg1)
}

// Update mocks base method.
func (m *MockCommentRepository) Update(ctx context.Context, comment *domain.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCommentRepositoryMockRecorder) Update(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentRepository)(nil).Update), ctx, comment)
}

// MockEventsRepository is a mock of EventsRepository interface.
type MockEventsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEventsRepositoryMockRecorder
	isgomock struct{}
}

// MockEventsRepositoryMockRecorder is the mock recorder for MockEventsRepository.
type MockEventsRepositoryMockRecorder struct {
	mock *MockEventsRepository
}

// NewMockEventsRepository creates a new mock instance.
func NewMockEventsRepository(ctrl *gomock.Controller) *MockEventsRepository {
	mock := &MockEventsRepository{ctrl: ctrl}
	mock.recorder = &MockEventsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsRepository) EXPECT() *MockEventsRepositoryMockRecorder {
	return m.recorder
}

// SaveMessage mocks base method.
func (m *MockEventsRepository) SaveMessage(message *domain.ChatMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockEventsRepositoryMockRecorder) SaveMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockEventsRepository)(nil).SaveMessage), message)
}

// MockMessageRepository is a mock of MessageRepository interface.
type MockMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMessageRepositoryMockRecorder
	isgomock struct{}
}

// MockMessageRepositoryMockRecorder is the mock recorder for MockMessageRepository.
type MockMessageRepositoryMockRecorder struct {
	mock *MockMessageRepository
}

// NewMockMessageRepository creates a new mock instance.
func NewMockMessageRepository(ctrl *gomock.Controller) *MockMessageRepository {
	mock := &MockMessageRepository{ctrl: ctrl}
	mock.recorder = &MockMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageRepository) EXPECT() *MockMessageRepositoryMockRecorder {
	return m.recorder
}

// SearchMessages mocks base method.
func (m *MockMessageRepository) SearchMessages(ctx context.Context, filters domain.SearchMessagesFilter) ([]*domain.ChatMessage, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMessages", ctx, filters)
	ret0, _ := ret[0].([]*domain.ChatMessage)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SearchMessages indicates an expected call of SearchMessages.
func (mr *MockMessageRepositoryMockRecorder) SearchMessages(ctx, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMessages", reflect.TypeOf((*MockMessageRepository)(nil).SearchMessages), ctx, filters)
}
