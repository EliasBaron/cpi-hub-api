// Code generated by MockGen. DO NOT EDIT.
// Source: cpi-hub-api/internal/core/usecase/space (interfaces: SpaceUseCase)
//
// Generated by this command:
//
//	mockgen -destination=mock/space_usecase_mock.go -package=mocks . SpaceUseCase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "cpi-hub-api/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSpaceUseCase is a mock of SpaceUseCase interface.
type MockSpaceUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSpaceUseCaseMockRecorder
	isgomock struct{}
}

// MockSpaceUseCaseMockRecorder is the mock recorder for MockSpaceUseCase.
type MockSpaceUseCaseMockRecorder struct {
	mock *MockSpaceUseCase
}

// NewMockSpaceUseCase creates a new mock instance.
func NewMockSpaceUseCase(ctrl *gomock.Controller) *MockSpaceUseCase {
	mock := &MockSpaceUseCase{ctrl: ctrl}
	mock.recorder = &MockSpaceUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpaceUseCase) EXPECT() *MockSpaceUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSpaceUseCase) Create(ctx context.Context, space *domain.Space) (*domain.SpaceWithUserAndCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, space)
	ret0, _ := ret[0].(*domain.SpaceWithUserAndCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSpaceUseCaseMockRecorder) Create(ctx, space any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSpaceUseCase)(nil).Create), ctx, space)
}

// Get mocks base method.
func (m *MockSpaceUseCase) Get(ctx context.Context, id string) (*domain.SpaceWithUserAndCounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*domain.SpaceWithUserAndCounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSpaceUseCaseMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSpaceUseCase)(nil).Get), ctx, id)
}

// GetUsersBySpace mocks base method.
func (m *MockSpaceUseCase) GetUsersBySpace(ctx context.Context, spaceID string) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersBySpace", ctx, spaceID)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersBySpace indicates an expected call of GetUsersBySpace.
func (mr *MockSpaceUseCaseMockRecorder) GetUsersBySpace(ctx, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersBySpace", reflect.TypeOf((*MockSpaceUseCase)(nil).GetUsersBySpace), ctx, spaceID)
}

// Search mocks base method.
func (m *MockSpaceUseCase) Search(ctx context.Context, criteria *domain.SpaceSearchCriteria) (*domain.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, criteria)
	ret0, _ := ret[0].(*domain.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSpaceUseCaseMockRecorder) Search(ctx, criteria any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSpaceUseCase)(nil).Search), ctx, criteria)
}
